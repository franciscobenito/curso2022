package es.rf.tienda.util;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

class ValidatorTest {
	
	final String NOT_ALFANUMERIC = "jkhkhjk657675/&%/&%/?=)?)?cvx vcxcvxvc"; 
	final String ALFANUMERIC = "poiuytre wqasdf . hhhhh , ; -";
	final String CODIGO_PRODUCTO_OK = "AB123";
	final String CODIGO_PRODUCTO_NO1 = "A123B";
	final String CODIGO_PRODUCTO_NO2 = "Ab123";
	final String CODIGO_PRODUCTO_NO3 = "A0123";
	final String CODIGO_PRODUCTO_FORMATO_ERR_NUM = "12345";
	final String CODIGO_PRODUCTO_FORMATO_ERR_ALF = "ABCDE";
	final String CODIGO_PRODUCTO_FORMATO_ERR_LON = "AB345678";
	String STRING_NULA;
	final String STRING_VACIA = "";
	final String CORREO_ELECTRONICO_CORRECTO = "migarcia@recursosformacion.com";
	final String CORREO_ELECTRONICO_ERRONEO_1 = "migarcia.recursosformacion.com";
	final String CORREO_ELECTRONICO_ERRONEO_2 = "migarcia@recursosformacion";
	final String NUMERO_DNI_OK = "12.345.678-Z"; 
	final String NUMERO_DNI_ERROR_LETRA = "12.345.678-A";
	final String NUMERO_DNI_ERROR_FORM_CORTO = "12.2.678-A";
	final String NUMERO_DNI_ERROR_FORM_CORTO2 = "122.678-A";
	final String NUMERO_DNI_ERROR_FORM_LARGO = "123.456.678-A";
	final String NUMERO_DNI_ERROR_FORM_ERR = "12345678A";
	final String NUMERO_DNI_ERROR_FORM_ERR2 = "12.345.678.A";
	final String CADENA1 = "a";
	final String CADENA5 = "Ansde";
	final String CADENA20 = "asmdjfoeirksndvieqaz";
	final String CADENA30 = "qazxswedcvfrtgbnhyujm,kiol.-ñp";
	final String CADENA50 = "poiuytrewqasdfghjklñmnbvcxzZXCVBNMÑLKJHGFDSAQWERTY";
	final String PHONENUMBER = "123456780";


	@Test
	void testIsAlfanumericIS() {
		assertTrue(Validator.isAlfanumeric(ALFANUMERIC));
	}
	
	@Test
	void testIsAlfanumericNOT() {
		assertFalse(Validator.isAlfanumeric(NOT_ALFANUMERIC));
	}

	@Test
	void testIsVacio() {
		assertAll(
				() -> assertTrue(Validator.isVacio(STRING_NULA)),
				() -> assertTrue(Validator.isVacio(STRING_VACIA)),
				() -> assertFalse(Validator.isVacio(ALFANUMERIC)));
	}

	@Test
	void testCumplePhoneNumber() {
		fail("Not yet implemented");
	}

	@Test
	void testIsEmailValido() {
		assertAll(
				() -> assertTrue(Validator.isEmailValido(CORREO_ELECTRONICO_CORRECTO)),
				() -> assertFalse(Validator.isEmailValido(CORREO_ELECTRONICO_ERRONEO_1)),
				() -> assertFalse(Validator.isEmailValido(CORREO_ELECTRONICO_ERRONEO_2)));
	}

	@Test
	void testCumpleDNI() {
		assertAll(
				() -> assertTrue(Validator.cumpleDNI(NUMERO_DNI_OK)),
				() -> assertFalse(Validator.cumpleDNI(NUMERO_DNI_ERROR_LETRA)),
				() -> assertFalse(Validator.cumpleDNI(NUMERO_DNI_ERROR_FORM_CORTO)),
				() -> assertFalse(Validator.cumpleDNI(NUMERO_DNI_ERROR_FORM_CORTO2)),
				() -> assertFalse(Validator.cumpleDNI(NUMERO_DNI_ERROR_FORM_LARGO)),
				() -> assertFalse(Validator.cumpleDNI(NUMERO_DNI_ERROR_FORM_ERR)),
				() -> assertFalse(Validator.cumpleDNI(NUMERO_DNI_ERROR_FORM_ERR2)));
	}

	/*@Test
	void testCumpleRangoInt() {
		assertAll(
				() -> assertTrue(Validator.cumpleRango(1,2,3)),
				() -> assertFalse(Validator.cumpleRango(1,2,3)),
				() -> assertFalse(Validator.cumpleRango(1,2,3)));
	}

	@Test
	void testCumpleRangoDouble() {
		assertAll(
				() -> assertTrue(Validator.cumpleRango(1.5,2,3)),
				() -> assertFalse(Validator.cumpleRango(1.5,2,3)),
				() -> assertFalse(Validator.cumpleRango(1.5,2,3)));
	}

	@Test
	void testCumpleLongitudMin() {
		assertAll(
				() -> assertTrue(Validator.cumpleLongitudMin("a",3)),
				() -> assertFalse(Validator.cumpleLongitudMin("a",3)),
				() -> assertFalse(Validator.cumpleLongitudMin("a",3)));
	}

	@Test
	void testCumpleLongitudMax() {
		assertAll(
				() -> assertTrue(Validator.cumpleLongitudMax("a",3)),
				() -> assertFalse(Validator.cumpleLongitudMax("a",3)),
				() -> assertFalse(Validator.cumpleLongitudMax("a",3)));
	}*/

	@Test
	void testCumpleLongitud() {
		fail("Not yet implemented");
	}

	@Test
	void testValDateMin() {
		fail("Not yet implemented");
	}

	@Test
	void testValDateMax() {
		fail("Not yet implemented");
	}

	@Test
	void testEsFechaValida() {
		fail("Not yet implemented");
	}

	@Test
	void testEsPasswordValida() {
		fail("Not yet implemented");
	}

}
